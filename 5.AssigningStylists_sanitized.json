{
  "name": "5.AssigningStylists",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "calendar/ensure",
        "responseMode": "lastNode",
        "options": {}
      },
      "id":"[redacted-id]",
      "name": "Retool → Calendar Ensure",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -1200,
        112
      ],
      "webhookId": "[redacted-uuid]"
    },
    {
      "parameters": {
        "jsCode": "// normalize + validate\nconst raw = $input.first().json || {};\nconst tenant_id = raw.org_id || raw.tenant_id || raw.orgId || null;\nconst request_id = raw.request_id || raw.booking_id || raw.id || null;\n\nif (!tenant_id || !request_id) {\n  return [{ json: {\n    success: false,\n    error: \"MISSING_KEYS\",\n    diagnostics: { tenant_id, request_id, raw },\n    http_status_hint: 400\n  }}];\n}\n\n// optional overrides\nconst ai_event_summary = raw.ai_event_summary || null;\nconst override_attendees = Array.isArray(raw.override_attendees) ? raw.override_attendees : null;\nconst location = raw.location ?? null;\n\nreturn [{\n  json: {\n    org_id: tenant_id,\n    request_id,\n    overrides: { ai_event_summary, override_attendees, location }\n  }\n}];"
      },
      "id":"[redacted-id]",
      "name": "Normalize (Calendar)",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1008,
        112
      ]
    },
    {
      "parameters": {
        "operation": "get",
        "tableId": "customer_requests",
        "filters": {
          "conditions": [
            {
              "keyName": "org_id",
              "keyValue": "={{$json.org_id}}"
            },
            {
              "keyName": "id",
              "keyValue": "={{$json.request_id}}"
            }
          ]
        }
      },
      "id":"[redacted-id]",
      "name": "Get Request",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -800,
        112
      ],
      "credentials": {
        "supabaseApi": {
          "id":"[redacted-id]",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "request_stylists",
        "limit": 100,
        "filters": {
          "conditions": [
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$json.id}}"
            },
            {
              "keyName": "request_id",
              "condition": "eq",
              "keyValue": "={{$json.request_id}}"
            },
            {
              "keyName": "stylist_name",
              "condition": "eq",
              "keyValue": "={{$json.stylist_name}}"
            },
            {
              "keyName": "stylist_email",
              "condition": "eq",
              "keyValue": "={{$json.stylist_email}}"
            },
            {
              "keyName": "org_id",
              "condition": "eq",
              "keyValue": "={{$json.org_id}}"
            }
          ]
        }
      },
      "id":"[redacted-id]",
      "name": "Load Assigned Stylists",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        -608,
        112
      ],
      "credentials": {
        "supabaseApi": {
          "id":"[redacted-id]",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// inputs\nconst norm = $items(\"Normalize (Calendar)\")[0].json;\nconst req  = $items(\"Get Request\")[0]?.json || {};\nconst assigned = $items(\"Load Assigned Stylists\").map(i => i.json);\n\n// Try to map stylist emails. If \"stylists\" array yoksa, request_stylists.stylist_email kolonunuz varsa onu kullanın.\nlet stylistEmails = [];\nif (assigned.length && assigned[0].stylist_email) {\n  stylistEmails = assigned.map(a => a.stylist_email).filter(Boolean);\n} else if (assigned.length && assigned[0].email) {\n  stylistEmails = assigned.map(a => a.email).filter(Boolean);\n} else if (assigned.length && assigned[0].stylist_id && req.stylist_map) {\n  // opsiyonel: eğer request içinde id→email map varsa\n  stylistEmails = assigned.map(a => req.stylist_map[a.stylist_id]).filter(Boolean);\n}\n\n// override varsa uygula\nif (Array.isArray(norm.overrides.override_attendees)) {\n  stylistEmails = norm.overrides.override_attendees;\n}\n\n// müşteri e-postasını da davete ekle\nconst customerEmail = req.customer_email || req.email || null;\n\n// summary önceliği: override -> req.ai_event_summary -> default\nconst summary =\n  norm.overrides.ai_event_summary ||\n  req.ai_event_summary ||\n  `LE Glam — ${req.customer_name || 'Client'} ${req.event_date || ''}`.trim();\n\n// description\nconst hair = Number(req.number_of_hair || 0);\nconst mu   = Number(req.number_of_makeup || 0);\nconst desc = [\n  `Client: ${req.customer_name || 'N/A'} (${customerEmail || 'no-email'})`,\n  `Event: ${req.event_date || 'TBD'} Ready by: ${req.ready_by_time || 'TBD'}`,\n  `Location: ${norm.overrides.location || req.service_location || 'TBD'}`,\n  `Services: Hair x${hair} • Makeup x${mu}`,\n  req.special_requests ? `Notes: ${req.special_requests}` : null\n].filter(Boolean).join('\\n');\n\nreturn [{\n  json: {\n    org_id: norm.org_id,\n    request_id: norm.request_id,\n    summary,\n    description: desc,\n    event_date: req.event_date,\n    ready_by_time: req.ready_by_time || '09:00',\n    location: norm.overrides.location || req.service_location || '',\n    attendees: [\n      ...stylistEmails.map(e => ({ email: e })),\n      ...(customerEmail ? [{ email: customerEmail }] : [])\n    ],\n    google_event_id: req.google_event_id || null,\n    customer_id: req.customer_id,\n    customer_name: req.customer_name\n  }\n}];"
      },
      "id":"[redacted-id]",
      "name": "Build Calendar Payload",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        112
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 1
          },
          "conditions": [
            {
              "leftValue": "={{$json.google_event_id}}",
              "rightValue": "",
              "operator": {
                "type": "string",
                "operation": "notEmpty"
              },
              "id":"[redacted-id]"
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id":"[redacted-id]",
      "name": "Has Google Event?",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        -208,
        112
      ]
    },
    {
      "parameters": {
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "start": "={{ DateTime.fromISO($json.event_date + 'T' + ($json.ready_by_time || '09:00') + ':00', { zone: 'America/New_York' }).toISO() }}",
        "end": "={{ DateTime.fromISO($json.event_date + 'T' + ($json.ready_by_time || '09:00') + ':00', { zone: 'America/New_York' }).plus({ hours: 3 }).toISO() }}",
        "additionalFields": {
          "attendees": [
            "={{ $json.attendees }}"
          ],
          "description": "={{$json.description}}",
          "location": "={{$json.location}}",
          "summary": "={{$json.summary}}"
        }
      },
      "id":"[redacted-id]",
      "name": "Create Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        0,
        208
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id":"[redacted-id]",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "calendar": {
          "__rl": true,
          "value": "primary",
          "mode": "list"
        },
        "eventId": "={{$json.google_event_id}}",
        "updateFields": {
          "allday": "no",
          "description": "={{$json.description}}",
          "end": "={{ DateTime.fromISO($json.event_date + 'T' + ($json.ready_by_time || '09:00') + ':00', { zone: 'America/New_York' }).plus({ hours: 3 }).toISO() }}",
          "location": "={{$json.location}}",
          "start": "={{ $json.event_date }}T{{ $json.ready_by_time || '09:00' }}:00",
          "summary": "={{$json.summary}}"
        }
      },
      "id":"[redacted-id]",
      "name": "Update Event",
      "type": "n8n-nodes-base.googleCalendar",
      "typeVersion": 1.3,
      "position": [
        0,
        0
      ],
      "credentials": {
        "googleCalendarOAuth2Api": {
          "id":"[redacted-id]",
          "name": "Google Calendar account"
        }
      }
    },
    {
      "parameters": {
        "operation": "update",
        "tableId": "customer_requests",
        "filters": {
          "conditions": [
            {
              "keyName": "org_id",
              "condition": "eq",
              "keyValue": "={{$json.org_id}}"
            },
            {
              "keyName": "id",
              "condition": "eq",
              "keyValue": "={{$json.request_id}}"
            }
          ]
        },
        "fieldsUi": {
          "fieldValues": [
            {
              "fieldId": "google_event_id",
              "fieldValue": "={{ $json.id || $json.google_event_id }}"
            }
          ]
        }
      },
      "id":"[redacted-id]",
      "name": "Update Request",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        208,
        112
      ],
      "credentials": {
        "supabaseApi": {
          "id":"[redacted-id]",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const src = $input.first().json;\nreturn [{\n  json: {\n    success: true,\n    message: src.google_event_id ? \"Calendar event updated\" : \"Calendar event created\",\n    request_id: src.request_id,\n    org_id: src.org_id,\n    google_event_id: src.google_event_id || $items(\"Create Event\")[0]?.json?.id || null,\n    attendees_count: Array.isArray(src.attendees) ? src.attendees.length : 0\n  }\n}];"
      },
      "id":"[redacted-id]",
      "name": "Respond",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        400,
        112
      ]
    }
  ],
  "pinData": {},
  "connections": {
    "Retool → Calendar Ensure": {
      "main": [
        [
          {
            "node": "Normalize (Calendar)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Normalize (Calendar)": {
      "main": [
        [
          {
            "node": "Get Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Request": {
      "main": [
        [
          {
            "node": "Load Assigned Stylists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Load Assigned Stylists": {
      "main": [
        [
          {
            "node": "Build Calendar Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Calendar Payload": {
      "main": [
        [
          {
            "node": "Has Google Event?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Google Event?": {
      "main": [
        [
          {
            "node": "Update Event",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Event",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Event": {
      "main": [
        [
          {
            "node": "Update Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Event": {
      "main": [
        [
          {
            "node": "Update Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Request": {
      "main": [
        [
          {
            "node": "Respond",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "[redacted-uuid]",
  "meta": {
    "[redacted-token]": true,
    "instanceId": "[redacted-token]"
  },
  "id":"[redacted-id]",
  "tags": [
    {
      "createdAt": "2025-09-17T00:53:58.257Z",
      "updatedAt": "2025-09-17T00:53:58.257Z",
      "id":"[redacted-id]",
      "name": "calendar"
    },
    {
      "createdAt": "2025-09-17T00:53:58.278Z",
      "updatedAt": "2025-09-17T00:53:58.278Z",
      "id":"[redacted-id]",
      "name": "stylists"
    }
  ]
}